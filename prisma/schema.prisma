// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  username          String    @unique
  password          String
  role              UserRole  @default(club)
  isActive          Boolean   @default(true) @map("is_active")
  lastLogin         DateTime? @map("last_login")
  passwordResetToken String?  @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  club              Club?
  official          Official?

  @@map("users")
}

model Club {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique @map("user_id")
  name          String
  phone         String?
  email         String?
  address       String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  user                 User                @relation(fields: [userId], references: [id])
  members              ClubMember[]
  eventRegistrations   EventRegistration[]
  invoices             Invoice[]

  @@map("clubs")
}

model Official {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique @map("user_id")
  name          String
  position      String?
  phone         String?
  email         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  user          User     @relation(fields: [userId], references: [id])
  events        EventOfficial[]

  @@map("officials")
}

model ClubMember {
  id               Int       @id @default(autoincrement())
  clubId           Int       @map("club_id")
  name             String
  role             String?
  email            String?
  phone            String?
  dateOfBirth      DateTime? @map("date_of_birth") @db.Date
  emergencyContact String?   @map("emergency_contact")
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  club                     Club                      @relation(fields: [clubId], references: [id])
  startingListParticipant  StartingListParticipant[]
  invoiceItems             InvoiceItem[]

  @@map("club_members")
}

model Event {
  id                   Int       @id @default(autoincrement())
  name                 String
  description          String?   @db.Text
  location             String?
  startDate            DateTime  @map("start_date") @db.Date
  endDate              DateTime  @map("end_date") @db.Date
  registrationDeadline DateTime? @map("registration_deadline") @db.Date
  status               EventStatus @default(draft)
  maxParticipants      Int?      @map("max_participants")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  eventRegistrations   EventRegistration[]
  startingLists        StartingList[]
  invoices             Invoice[]
  officials            EventOfficial[]

  @@map("events")
}

model EventOfficial {
  id          Int      @id @default(autoincrement())
  eventId     Int      @map("event_id")
  officialId  Int      @map("official_id")
  role        String
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  event      Event     @relation(fields: [eventId], references: [id])
  official   Official  @relation(fields: [officialId], references: [id])

  @@map("event_officials")
}

model EventRegistration {
  id               Int      @id @default(autoincrement())
  eventId          Int      @map("event_id")
  clubId           Int      @map("club_id")
  registrationDate DateTime @default(now()) @map("registration_date")
  status           RegistrationStatus @default(pending)
  notes            String?  @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event  Event  @relation(fields: [eventId], references: [id])
  club   Club   @relation(fields: [clubId], references: [id])

  @@map("event_registrations")
}

model StartingList {
  id               Int      @id @default(autoincrement())
  eventId          Int      @map("event_id")
  category         String
  ageGroup         String?  @map("age_group")
  gender           Gender?
  maxParticipants  Int?     @map("max_participants")
  startTime        DateTime? @map("start_time")
  status           StartingListStatus @default(scheduled)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  event                   Event                     @relation(fields: [eventId], references: [id])
  participants            StartingListParticipant[]
  invoiceItems            InvoiceItem[]

  @@map("starting_lists")
}

model StartingListParticipant {
  id              Int       @id @default(autoincrement())
  startingListId  Int       @map("starting_list_id")
  memberId        Int       @map("member_id")
  laneNumber      Int?      @map("lane_number")
  seedTime        DateTime? @map("seed_time") @db.Time
  finalTime       DateTime? @map("final_time") @db.Time
  position        Int?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  startingList  StartingList  @relation(fields: [startingListId], references: [id])
  member        ClubMember    @relation(fields: [memberId], references: [id])

  @@map("starting_list_participants")
}

model Invoice {
  id              Int      @id @default(autoincrement())
  clubId          Int      @map("club_id")
  eventId         Int      @map("event_id")
  amount          Decimal  @db.Decimal(10, 2)
  issueDate       DateTime @map("issue_date") @db.Date
  dueDate         DateTime @map("due_date") @db.Date
  status          InvoiceStatus @default(draft)
  paymentDate     DateTime? @map("payment_date") @db.Date
  paymentMethod   String?  @map("payment_method")
  referenceNumber String?  @map("reference_number")
  notes           String?  @db.Text
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  club          Club           @relation(fields: [clubId], references: [id])
  event         Event          @relation(fields: [eventId], references: [id])
  invoiceItems  InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  id              Int      @id @default(autoincrement())
  invoiceId       Int      @map("invoice_id")
  startingListId  Int      @map("starting_list_id")
  memberId        Int      @map("member_id")
  description     String
  quantity        Int      @default(1)
  unitPrice       Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice      Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  invoice      Invoice       @relation(fields: [invoiceId], references: [id])
  startingList StartingList  @relation(fields: [startingListId], references: [id])
  member       ClubMember    @relation(fields: [memberId], references: [id])

  @@map("invoice_items")
}

// Enums
enum UserRole {
  club
  official
  admin
}

enum EventStatus {
  draft
  open
  in_progress
  completed
  canceled
}

enum RegistrationStatus {
  pending
  confirmed
  canceled
}

enum StartingListStatus {
  scheduled
  in_progress
  completed
}

enum Gender {
  male
  female
}

enum InvoiceStatus {
  draft
  issued
  paid
  canceled
  overdue
}