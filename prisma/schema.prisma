generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  club
  official
  admin
}

enum EventStatus {
  draft
  open
  in_progress
  completed
  canceled
}

enum RegistrationStatus {
  pending
  confirmed
  canceled
}

enum StartingListStatus {
  scheduled
  in_progress
  completed
}

enum Gender {
  male
  female
}

enum InvoiceStatus {
  draft
  issued
  paid
  canceled
  overdue
}

enum ClubMemberTypes {
  achieving
  non_achieving
}

// Models
model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  username            String    @unique
  password            String
  role                UserRole  @default(club)
  is_active           Boolean   @default(true)
  last_login          DateTime?
  password_reset_token String?
  password_reset_expires DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  clubs               Club[]
  officials           Official[]
}

model Club {
  id                  Int       @id @default(autoincrement())
  user_id             Int       @unique
  user                User      @relation(fields: [user_id], references: [id])
  name                String
  phone               String?
  email               String?
  address             String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  deleted_at          DateTime? @map("deleted_at")
  active              Boolean  @default(true)
  members             ClubMember[]
  event_registrations EventRegistration[]
  invoices            Invoice[]
  @@map("clubs")
  @@index([deleted_at]) // Add index for better performance
}

model Official {
  id                  Int       @id @default(autoincrement())
  user_id             Int       @unique
  user                User      @relation(fields: [user_id], references: [id])
  name                String
  position            String?
  phone               String?
  email               String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  event_officials     EventOfficial[]
}

model ClubMember {
  id                  Int       @id @default(autoincrement())
  club_id             Int
  club                Club      @relation(fields: [club_id], references: [id])
  name                String
  role                String?
  email               String?
  phone               String?
  date_of_birth       DateTime?
  emergency_contact   String?
  category            ClubMemberTypes @default(non_achieving)
  certificates        Json?
  active              Boolean   @default(true)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  starting_list_participants StartingListParticipant[]
  invoice_items       InvoiceItem[]
}

model Event {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?
  location            String?
  start_date          DateTime
  end_date            DateTime
  registration_deadline DateTime?
  status              EventStatus @default(draft)
  max_participants    Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  event_officials     EventOfficial[]
  registrations       EventRegistration[]
  starting_lists      StartingList[]
  invoices            Invoice[]
}

model EventOfficial {
  id                  Int       @id @default(autoincrement())
  event_id            Int
  event               Event     @relation(fields: [event_id], references: [id])
  official_id         Int
  official            Official  @relation(fields: [official_id], references: [id])
  role                String
  created_at          DateTime  @default(now())
}

model EventRegistration {
  id                  Int       @id @default(autoincrement())
  event_id            Int
  event               Event     @relation(fields: [event_id], references: [id])
  club_id             Int
  club                Club      @relation(fields: [club_id], references: [id])
  registration_date   DateTime  @default(now())
  status              RegistrationStatus @default(pending)
  notes               String?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
}

model StartingList {
  id                  Int       @id @default(autoincrement())
  event_id            Int
  event               Event     @relation(fields: [event_id], references: [id])
  category            String
  age_group           String?
  gender              Gender?
  max_participants    Int?
  start_time          DateTime?
  status              StartingListStatus @default(scheduled)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  participants        StartingListParticipant[]
  invoice_items       InvoiceItem[]
}

model StartingListParticipant {
  id                  Int       @id @default(autoincrement())
  starting_list_id    Int
  starting_list       StartingList @relation(fields: [starting_list_id], references: [id])
  member_id           Int
  member              ClubMember @relation(fields: [member_id], references: [id])
  lane_number         Int?
  seed_time           DateTime?
  final_time          DateTime?
  position            Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
}

model Invoice {
  id                  Int       @id @default(autoincrement())
  club_id             Int
  club                Club      @relation(fields: [club_id], references: [id])
  event_id            Int
  event               Event     @relation(fields: [event_id], references: [id])
  amount              Float     @default(0.00)
  issue_date          DateTime
  due_date            DateTime
  status              InvoiceStatus @default(draft)
  payment_date        DateTime?
  payment_method      String?
  reference_number    String?
  notes               String?
  deleted_at          DateTime? @map("deleted_at")
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now()) @updatedAt
  items               InvoiceItem[]
}

model InvoiceItem {
  id                  Int       @id @default(autoincrement())
  invoice_id          Int
  invoice             Invoice   @relation(fields: [invoice_id], references: [id])
  starting_list_id    Int
  starting_list       StartingList @relation(fields: [starting_list_id], references: [id])
  member_id           Int
  member              ClubMember @relation(fields: [member_id], references: [id])
  description         String
  quantity            Int       @default(1)
  unit_price          Float     @default(0.00)
  total_price         Float     @default(0.00)
  created_at          DateTime  @default(now())
}